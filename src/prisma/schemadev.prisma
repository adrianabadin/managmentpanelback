generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "./rsx.sqlite"
}

model Agreements {
  id            String      @id
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  name          String      @unique
  description   String
  departmentsId String
  demographyId  String
  Demography    Demography  @relation(fields: [demographyId], references: [id])
  Departments   Departments @relation(fields: [departmentsId], references: [id])
}

model Cities {
  id         String     @id
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  name       String     @unique
  stateId    String
  Demography Demography @relation(fields: [stateId], references: [id])
}

model Demography {
  id             String           @id
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  state          String           @unique
  population     Int
  description    String
  politics       String
  Agreements     Agreements[]
  Cities         Cities[]
  FODA           FODA[]
  Golds          Golds[]
  IssuesByUser   IssuesByUser[]
  Tasks          Tasks[]
  Throbleshuting Throbleshuting[]
  Departments    Departments[]
}

model Departments {
  id             String           @id
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  name           String           @unique
  description    String
  usersId        String?
  demographyId   String?
  Agreements     Agreements[]
  Users          Users?           @relation(fields: [usersId], references: [id])
  FODA           FODA[]
  Golds          Golds[]
  Tasks          Tasks[]
  Throbleshuting Throbleshuting[]
  Demography     Demography[]
}

model FODA {
  id            String       @id
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  demographyId  String?
  departmentsId String?
  Demography    Demography?  @relation(fields: [demographyId], references: [id])
  Departments   Departments? @relation(fields: [departmentsId], references: [id])
  Menace        Menace[]
  Oportunity    Oportunity[]
  StrategySM    StrategySM[]
  StrategySO    StrategySO[]
  StrategyWM    StrategyWM[]
  StrategyWO    StrategyWO[]
  Strength      Strength[]
  Weakness      Weakness[]

  @@unique([demographyId, departmentsId])
}

model FileDescriptor {
  id                  String             @id
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  name                String
  driveId             String
  description         String
  issuesByUserId      String?
  issueInterventionId String?
  IssueIntervention   IssueIntervention? @relation(fields: [issueInterventionId], references: [id])
  IssuesByUser        IssuesByUser?      @relation(fields: [issuesByUserId], references: [id])
}

model Golds {
  id             String       @id
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  title          String       @unique
  description    String
  expirationDate DateTime
  demographyId   String?
  departmentsId  String?
  Demography     Demography?  @relation(fields: [demographyId], references: [id])
  Departments    Departments? @relation(fields: [departmentsId], references: [id])
}

model IssueIntervention {
  id             String           @id
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  text           String
  issuesByUserId String
  FileDescriptor FileDescriptor[]
  IssuesByUser   IssuesByUser     @relation(fields: [issuesByUserId], references: [id])
}

model IssuesByUser {
  id                   String              @id
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  email                String?
  email2               String?
  name                 String
  lastName             String
  socialSecurityNumber String
  phone                String?
  phone2               String?
  demographyId         String
  description          String
  kindOfIssueId        String
  issueState           IssueState          @default(pending)
  FileDescriptor       FileDescriptor[]
  IssueIntervention    IssueIntervention[]
  Demography           Demography          @relation(fields: [demographyId], references: [id])
  KindOfIssue          KindOfIssue         @relation(fields: [kindOfIssueId], references: [id])
}

model KindOfIssue {
  id           String         @id
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  name         String         @unique
  text         String
  IssuesByUser IssuesByUser[]
}

model Menace {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String
  FODA        FODA     @relation(fields: [fODAId], references: [id])
}

model Oportunity {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String
  FODA        FODA     @relation(fields: [fODAId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model StrategySM {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String?
  FODA        FODA?    @relation(fields: [fODAId], references: [id])
}

model StrategySO {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String?
  FODA        FODA?    @relation(fields: [fODAId], references: [id])
}

model StrategyWM {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String?
  FODA        FODA?    @relation(fields: [fODAId], references: [id])
}

model StrategyWO {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String?
  FODA        FODA?    @relation(fields: [fODAId], references: [id])
}

model Strength {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  isActive    Boolean  @default(true)
  title       String
  description String
  fODAId      String
  FODA        FODA     @relation(fields: [fODAId], references: [id])
}

model Tasks {
  id            String      @id
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  title         String
  demographyId  String
  departmentsId String
  isCompleted   Boolean     @default(false)
  date          DateTime
  userId        String
  brief         String?
  file          String?
  flag          Flags
  Demography    Demography  @relation(fields: [demographyId], references: [id])
  Departments   Departments @relation(fields: [departmentsId], references: [id])
  Users         Users       @relation(fields: [userId], references: [id])
}

model Throbleshuting {
  id            String      @id
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  name          String      @unique
  description   String
  demographyId  String
  departmentsId String
  Demography    Demography  @relation(fields: [demographyId], references: [id])
  Departments   Departments @relation(fields: [departmentsId], references: [id])
}

model Users {
  id          String        @id
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  name        String
  lastname    String
  hash        String
  isAdmin     Boolean       @default(false)
  username    String        @unique
  phone       String?
  Departments Departments[]
  Tasks       Tasks[]
}

model Weakness {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  title       String
  description String
  isActive    Boolean  @default(true)
  fODAId      String
  FODA        FODA     @relation(fields: [fODAId], references: [id])
}

enum Flags {
  red
  yellow
  green
}

enum IssueState {
  pending
  working
  terminated
}

enum ROLES {
  director
  sies
  comunitaria
  epidemiologia
  deposito
  rrhh
  acceso
  prodiaba
  proepi
  equidad
  inmuno
  sexual
  mental
}
