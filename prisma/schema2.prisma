generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("OTRADB")
    //relationMode = "prisma"
}

enum ROLES {
    director
    sies
    comunitaria
    epidemiologia
    deposito
    rrhh
    acceso
    prodiaba
    proepi
    equidad
    inmuno
    sexual
    mental
}

model Demography {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    state          String           @unique
    cities         Cities[]
    population     Int
    description    String
    politics       String
    golds          Golds[]
    Agreements     Agreements[]
    throbleshuting Throbleshuting[]
    tasks          Tasks[]
    Departments    Departments[]
    FODA           FODA[]
    IssuesByUser   IssuesByUser[]
}

model Golds {
    id             String       @id @default(uuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    title          String       @unique
    description    String
    expirationDate DateTime
    Demography     Demography?  @relation(fields: [demographyId], references: [id])
    demographyId   String?
    departments    Departments? @relation(fields: [departmentsId], references: [id])
    departmentsId  String?
}

model Departments {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    name           String           @unique
    description    String
    responsable    Users?           @relation(fields: [usersId], references: [id])
    usersId        String?
    golds          Golds[]
    Agreements     Agreements[]
    throbleshuting Throbleshuting[]
    tasks          Tasks[]
    state          Demography[]
    demographyId   String?
    FODA           FODA[]
}

model Agreements {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String      @unique
    description   String
    department    Departments @relation(fields: [departmentsId], references: [id])
    departmentsId String
    state         Demography  @relation(fields: [demographyId], references: [id])
    demographyId  String
}

enum Flags {
    red
    yellow
    green
}

model Tasks {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    title         String
    state         Demography  @relation(fields: [demographyId], references: [id])
    demographyId  String
    department    Departments @relation(fields: [departmentsId], references: [id])
    departmentsId String
    isCompleted   Boolean     @default(false)
    date          DateTime
    user          Users       @relation(fields: [userId], references: [id])
    userId        String
    brief         String?
    file          String?
    flag          Flags
}

model Throbleshuting {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String      @unique
    description   String
    state         Demography  @relation(fields: [demographyId], references: [id])
    demographyId  String
    department    Departments @relation(fields: [departmentsId], references: [id])
    departmentsId String
}

model Cities {
    id        String     @id @default(uuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String     @unique
    stateId   String
    state     Demography @relation(fields: [stateId], references: [id])
}

model Users {
    id          String        @id @default(uuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String
    lastname    String
    hash        String
    isAdmin     Boolean       @default(false)
    username    String        @unique
    phone       String?
    departments Departments[]
    Tasks       Tasks[]
}

model Strength {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    isActive    Boolean  @default(true)
    title       String
    description String
    FODA        FODA     @relation(fields: [fODAId], references: [id])
    fODAId      String
}

model Oportunity {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    FODA        FODA     @relation(fields: [fODAId], references: [id])
    isActive    Boolean  @default(true)
    fODAId      String
}

model Weakness {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    FODA        FODA     @relation(fields: [fODAId], references: [id])
    isActive    Boolean  @default(true)
    fODAId      String
}

model Menace {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    FODA        FODA     @relation(fields: [fODAId], references: [id])
    isActive    Boolean  @default(true)
    fODAId      String
}

model StrategySO {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    isActive    Boolean  @default(true)
    FODA        FODA?    @relation(fields: [fODAId], references: [id])
    fODAId      String?
}

model StrategySM {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    isActive    Boolean  @default(true)
    FODA        FODA?    @relation(fields: [fODAId], references: [id])
    fODAId      String?
}

model StrategyWO {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    isActive    Boolean  @default(true)
    FODA        FODA?    @relation(fields: [fODAId], references: [id])
    fODAId      String?
}

model StrategyWM {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    isActive    Boolean  @default(true)
    FODA        FODA?    @relation(fields: [fODAId], references: [id])
    fODAId      String?
}

model FODA {
    id            String       @id @default(uuid())
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    state         Demography?  @relation(fields: [demographyId], references: [id])
    demographyId  String?
    service       Departments? @relation(fields: [departmentsId], references: [id])
    departmentsId String?
    strengths     Strength[]
    weakneasses   Weakness[]
    oportunities  Oportunity[]
    menaces       Menace[]
    strategySO    StrategySO[]
    strategySM    StrategySM[]
    strategyWO    StrategyWO[]
    strategyWM    StrategyWM[]

    @@unique([demographyId, departmentsId])
}

model KindOfIssue {
    id           String         @id @default(uuid())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    name         String         @unique
    text         String
    IssuesByUser IssuesByUser[]
}

model FileDescriptor {
    id                  String             @id @default(uuid())
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    name                String
    driveId             String
    description         String
    IssuesByUser        IssuesByUser?      @relation(fields: [issuesByUserId], references: [id])
    issuesByUserId      String?
    IssueIntervention   IssueIntervention? @relation(fields: [issueInterventionId], references: [id])
    issueInterventionId String?
}

model IssuesByUser {
    id                   String              @id @default(uuid())
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    email                String?
    email2               String?
    name                 String
    lastName             String
    socialSecurityNumber String
    phone                String?
    phone2               String?
    state                Demography          @relation(fields: [demographyId], references: [id])
    demographyId         String
    kind                 KindOfIssue         @relation(fields: [kindOfIssueId], references: [id])
    description          String
    kindOfIssueId        String
    files                FileDescriptor[]
    IssueIntervention    IssueIntervention[]
    issueState           IssueState          @default(pending)
}

enum IssueState {
    pending
    working
    terminated
}

model IssueIntervention {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    text           String
    files          FileDescriptor[]
    issue          IssuesByUser     @relation(fields: [issuesByUserId], references: [id])
    issuesByUserId String
}

model Session {
    id        String   @id @default(uuid())
    sid       String   @unique
    data      String
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
